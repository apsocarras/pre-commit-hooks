"""Create an example `.env` file with only the names of variables.

Keeps a Git-safe record of what .env vars you may set for the project.
"""

from __future__ import annotations

import io
import os
import textwrap
from collections.abc import Callable, Iterable
from pathlib import Path

import click
from useful_types import (
    SequenceNotStr as Sequence,  # pyright: ignore[reportUnusedImport]
)

from ..utils._click_utils import (
    READ_DIR_TYPE,
    READ_FILE_TYPE,
    WRITE_DIR_TYPE,
    stage_if_true,
)
from ..utils._file_utils import write_, write_if_changed
from ..utils.git_utils import check_ignored, find_repo_root
from ..utils.preCommitConfigYaml import HookConfigBlock as cb


def raise_if_git_ignored(git_root: Path, skelenv_path: Path) -> None:
    """If the mock .env path would be ignored...there's no real point to this hook."""
    if check_ignored(git_root, skelenv_path):
        raise click.ClickException(f"{skelenv_path} ignored.")  # noqa: TRY003


def _iter_env_var_names(
    p: Path, include_eq_sign: bool = True, strip_export: bool = True
) -> Iterable[str]:
    offset = 0 if not include_eq_sign else 1

    if strip_export:
        _final: Callable[[str], str] = lambda s: s.removeprefix("export ")
    else:
        _final = lambda s: s

    for l in p.read_text().splitlines():
        if not (ls := l.strip()) or ls.startswith("#"):
            continue
        if (idx := l.find("=")) == -1:
            continue
        yield _final(ls)[: idx + offset]


def build_skeleton(base_env_path: Path) -> str:
    """1. Attach header 2. Skip duplicate lines 3. Sort"""
    buf = io.StringIO()
    write_(
        buf,
        textwrap.dedent(
            """
            # AUTO-GENERATED BY: ahooks.env_skeleton
            # Do not edit manually
            """
        ),
    )
    seen: set[str] = set()
    for var in sorted(_iter_env_var_names(base_env_path)):
        if var in seen:
            continue
        seen.add(var)
        write_(buf, "\n")
    return buf.getvalue()


@click.command
@click.argument("git_repo_root", type=READ_DIR_TYPE)
@click.argument("base_env_path", type=READ_FILE_TYPE)
@click.argument("skelenv_dir", type=WRITE_DIR_TYPE)
@cb(
    id="env-skeleton",
    name="Create an example `.env` file with only the names of variables",
    entry="python -m ahooks.env_skeleton",
    language="system",
    pass_filenames=False,
    args=(".", ".env", "."),
    stages=("pre-commit", "pre-push"),
)
def env_skeleton(git_repo_root: Path, base_env_path: Path, skelenv_dir: Path) -> None:
    """Create an example `.env` file with only the names of variables.

    Keeps a Git-safe record of what .env vars you may set for the project.
    """
    git_root: Path = find_repo_root(git_repo_root)
    skelenv_path = skelenv_dir / (os.path.basename(base_env_path) + ".skeleton")

    raise_if_git_ignored(git_root, skelenv_path)
    content = build_skeleton(base_env_path)
    changed = write_if_changed(base_env_path, content)
    stage_if_true(changed, "env-skeleton", skelenv_path)


if __name__ == "__main__":
    env_skeleton()
